[{"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\index.js":"1","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\App.js":"2","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\reportWebVitals.js":"3","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\Dataproviders\\AccountProvider.js":"4","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Mainpage.js":"5","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Detailedstockpage.js":"6","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Portfolioperformance.js":"7","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\CashStockProfit.js":"8","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\StocksTable.js":"9","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\LineChart.js":"10","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Stockcard.js":"11","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Offers.js":"12","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Chart.js":"13","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\StatsCard.js":"14","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\EditForm.js":"15","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Piechart.js":"16","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Profile.js":"17","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\StockProfile.js":"18","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\StockPerformance.js":"19","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferForm.js":"20","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\StockStatsCard.js":"21","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\StockListPage\\StockList.js":"22","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\StockListPage\\AreaChart.js":"23","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\OffersTable.js":"24","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_SELL.js":"25","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_BUY.js":"26","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_DEL.js":"27","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal.js":"28","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_EDIT.js":"29","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\NewsPage\\SpecificNews.js":"30","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\NewsPage\\AllNews.js":"31","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\NewsPage\\NewsCard.js":"32"},{"size":658,"mtime":1610703476792,"results":"33","hashOfConfig":"34"},{"size":5932,"mtime":1612880291963,"results":"35","hashOfConfig":"34"},{"size":375,"mtime":1609849225857,"results":"36","hashOfConfig":"34"},{"size":2793,"mtime":1610703476773,"results":"37","hashOfConfig":"34"},{"size":3943,"mtime":1612431019224,"results":"38","hashOfConfig":"34"},{"size":1722,"mtime":1611913529501,"results":"39","hashOfConfig":"34"},{"size":1455,"mtime":1612431019225,"results":"40","hashOfConfig":"34"},{"size":2046,"mtime":1612431019223,"results":"41","hashOfConfig":"34"},{"size":2918,"mtime":1612513735489,"results":"42","hashOfConfig":"34"},{"size":1802,"mtime":1612349945226,"results":"43","hashOfConfig":"34"},{"size":7701,"mtime":1611569236941,"results":"44","hashOfConfig":"34"},{"size":5959,"mtime":1612455158983,"results":"45","hashOfConfig":"34"},{"size":9401,"mtime":1612456483335,"results":"46","hashOfConfig":"34"},{"size":972,"mtime":1612431019226,"results":"47","hashOfConfig":"34"},{"size":4070,"mtime":1612377427075,"results":"48","hashOfConfig":"34"},{"size":485,"mtime":1610703476784,"results":"49","hashOfConfig":"34"},{"size":1868,"mtime":1612431019226,"results":"50","hashOfConfig":"34"},{"size":2880,"mtime":1612377427079,"results":"51","hashOfConfig":"34"},{"size":3427,"mtime":1612431019222,"results":"52","hashOfConfig":"34"},{"size":5698,"mtime":1612377427075,"results":"53","hashOfConfig":"34"},{"size":915,"mtime":1611913529507,"results":"54","hashOfConfig":"34"},{"size":3707,"mtime":1612455158986,"results":"55","hashOfConfig":"34"},{"size":1637,"mtime":1612349945231,"results":"56","hashOfConfig":"34"},{"size":3822,"mtime":1612455266791,"results":"57","hashOfConfig":"34"},{"size":8360,"mtime":1612455158982,"results":"58","hashOfConfig":"34"},{"size":8355,"mtime":1612455158980,"results":"59","hashOfConfig":"34"},{"size":6478,"mtime":1612455158980,"results":"60","hashOfConfig":"34"},{"size":8793,"mtime":1612455158979,"results":"61","hashOfConfig":"34"},{"size":8347,"mtime":1612455158981,"results":"62","hashOfConfig":"34"},{"size":501,"mtime":1612880218331,"results":"63","hashOfConfig":"34"},{"size":1353,"mtime":1612989396223,"results":"64","hashOfConfig":"34"},{"size":829,"mtime":1612989450038,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"dpmvsr",{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"68"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"68"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\index.js",[],["151","152"],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\App.js",["153","154"],"import './App.css';\r\nimport React, {useEffect} from 'react'\r\nimport {Helmet} from 'react-helmet';\r\n/*import '../node_modules/bootstrap/dist/css/bootstrap.css';*/\r\nimport '../src/scss/custom.scss';\r\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\r\nimport Mainpage from './components/MainPage/Mainpage';\r\nimport Detailedstockpage from './components/DetailedStockPage/Detailedstockpage';\r\nimport StockList from './components/StockListPage/StockList';\r\nimport AllNews from './components/NewsPage/AllNews';\r\nimport SpecificNews from './components/NewsPage/SpecificNews';\r\n\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    const feather = require('feather-icons');\r\n    feather.replace();\r\n}, [])\r\n\r\n  return (\r\n    <div className=\"App\" style={{backgroundColor: \"#f4f7fa\"}}>\r\n            <Helmet>\r\n            <meta charset=\"utf-8\" />\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n            <meta name=\"description\" content=\"\" />\r\n            <meta name=\"author\" content=\"\" />\r\n            </Helmet>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-primary flex-md-nowrap p-0 shadow\">\r\n      <a className=\"navbar-brand col-sm-3 col-md-2 mr-0\" href=\"/\">Stock Trader</a>\r\n      <input className=\"form-control form-control-dark w-50\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n      <ul className=\"navbar-nav px-3\">\r\n        <li className=\"nav-item text-nowrap\">\r\n          <a className=\"nav-link\" >Sign in</a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\r\n          <div className=\"sidebar-sticky mt-5\" style={{position: \"fixed\"}}>\r\n            <ul className=\"nav flex-column\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" href=\"/\">\r\n                  <span data-feather=\"home\"></span>\r\n                  Mainpage <span className=\"sr-only\">(current)</span>\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/stocks\" >\r\n                  <span data-feather=\"file\" ></span> \r\n                  Stocks\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/news\">\r\n                  <span data-feather=\"bar-chart-2\"></span>\r\n                  News\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" >\r\n                  <span data-feather=\"bar-chart-2\"></span>\r\n                  Reports\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          {/*\r\n            <h6 className=\"sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted\">\r\n              <span>Saved reports</span>\r\n              <a className=\"d-flex align-items-center text-muted\" >\r\n                <span data-feather=\"plus-circle\"></span>\r\n              </a>\r\n            </h6>\r\n            <ul className=\"nav flex-column mb-2\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" >\r\n                  <span data-feather=\"file-text\"></span>\r\n                  Current month\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" >\r\n                  <span data-feather=\"file-text\"></span>\r\n                  Last quarter\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" >\r\n                  <span data-feather=\"file-text\"></span>\r\n                  Social engagement\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" >\r\n                  <span data-feather=\"file-text\"></span>\r\n                  Year-end sale\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          */}\r\n          </div>\r\n        </nav>\r\n\r\n        <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n          <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n            <h1 className=\"h2\">Dashboard</h1>\r\n            {/*\r\n            <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n              <div className=\"btn-group mr-2\">\r\n                <button className=\"btn btn-sm btn-outline-secondary\">Share</button>\r\n                <button className=\"btn btn-sm btn-outline-secondary\">Export</button>\r\n              </div>\r\n              <button className=\"btn btn-sm btn-outline-secondary dropdown-toggle\">\r\n                <span data-feather=\"calendar\"></span>\r\n                This week\r\n              </button>\r\n            </div>\r\n            */}\r\n          </div>\r\n          <Router>\r\n            <div className=\"my-4 w-100\" width=\"900\" height=\"380\">\r\n              <Route exact path=\"/\">\r\n                <Mainpage />\r\n              </Route>\r\n              <Route exact path=\"/stockpage/:symbol\" component={Symbol}>\r\n                <Detailedstockpage symbol={Symbol} />\r\n              </Route>\r\n              <Route exact path=\"/stocks\">\r\n                <StockList />\r\n              </Route>\r\n              <Route exact path=\"/news\">\r\n                <AllNews />\r\n              </Route>\r\n              <Route exact path=\"/news/:symbol\" component={Symbol}>\r\n                <SpecificNews symbol={Symbol} />\r\n              </Route>\r\n            </div>\r\n          </Router>\r\n          {/* <canvas className=\"my-4 w-100\" id=\"myChart\" width=\"900\" height=\"380\"></canvas> */}\r\n\r\n          \r\n        </main>\r\n      </div>\r\n    </div>\r\n    <Helmet>\r\n    <script src=\"../../assets/js/vendor/popper.min.js\" rel=\"text/javascript\"></script>\r\n    </Helmet>\r\n    </div> \r\n  );\r\n}\r\n \r\nexport default App;\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\reportWebVitals.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\Dataproviders\\AccountProvider.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Mainpage.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Detailedstockpage.js",["155","156"],"import React from 'react';\r\nimport StocksTable from '../MainPage/StocksTable';\r\nimport Chart from './Chart';\r\nimport Offers from './Offers';\r\nimport Stockcard from './Stockcard';\r\nimport StockProfile from './StockProfile';\r\nimport StockPerformance from './StockPerformance';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nexport default function Detailedstockpage(){\r\n    let {symbol} = useParams();\r\n    \r\n    return(\r\n        <div>\r\n                    <div class=\"card m-3 border border-primary container mx-auto\">\r\n                        <h3 style={{textAlign: \"center\"}}>Portfolio balance of {symbol}</h3>\r\n                        <div className=\"row row-eq-height w-100 mx-auto\">  \r\n                                <div className=\"col ml-5 mr-4 card border border-info\">\r\n                                    <StockProfile symbol={symbol} />\r\n                                </div>\r\n                                <div className=\"col mr-5 ml-4 card border border-info\" style={{textAlign: \"right\"}}>                                   \r\n                                    <StockPerformance symbol={symbol}/>                                  \r\n                                </div>\r\n                        </div>\r\n                    </div>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\" >\r\n                    <div className=\"col mt-5\">\r\n                        <Chart symbol={symbol} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col mt-5\">\r\n                        <Offers symbol={symbol}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Portfolioperformance.js",["157"],"import React,{useState, useEffect} from 'react';\r\nimport './Portfolioperformance.css';\r\nimport StatsCard from './StatsCard';\r\nimport axios from 'axios';\r\n\r\nexport default function Portfolioperformance(props) {\r\n    const [Performance, setPerformance] = useState({});\r\n\r\n    useEffect(() => {\r\n        setPerformance(props.portfolioPerformance_Portfolioperformance)\r\n\r\n    }, [props.portfolioPerformance_Portfolioperformance])\r\n\r\n    if (Performance === null) {\r\n        return (\r\n            <div>\r\n                <img\r\n                  className = \"mx-auto d-block\"\r\n                  id=\"loading\"\r\n                  src=\"/candle_loader.gif\"\r\n                  alt=\"loading candle chart\"\r\n                  width=\"70%\"\r\n                  height=\"auto\"\r\n                />\r\n            </div>\r\n        );\r\n      } else {\r\n        return(\r\n            <div className=\"my-auto\"> \r\n                <StatsCard\r\n                    label={\"Free cash\"}\r\n                    amount={`${Performance.portfolioFreeCashValue}`}\r\n                    icon={\"las la-money-bill-wave fa-3x float-left\"}\r\n                    prefix={\"$ \"}\r\n                />\r\n                <StatsCard\r\n                    label={\"Total stock value\"}\r\n                    amount={`${Performance.portfolioTotalStockValue}`}\r\n                    icon={\"las la-chart-line fa-3x float-left\"}\r\n                    prefix={\"$ \"}\r\n                />\r\n            </div>\r\n        )\r\n      }\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\CashStockProfit.js",["158"],"import React,{useState, useEffect} from 'react';\r\nimport StatsCard from './StatsCard';\r\nimport axios from 'axios';\r\n\r\nexport default function CashStockProfit(props) {\r\n    const [Performance, setPerformance] = useState({});\r\n\r\n    useEffect(() => {\r\n        setPerformance(props.portfolioPerformance_CashStockProfit)\r\n    }, [props.portfolioPerformance_CashStockProfit])\r\n\r\n    if (Performance === null) {\r\n        return (\r\n            <div>\r\n                <img\r\n                  className = \"mx-auto d-block\"\r\n                  id=\"loading\"\r\n                  src=\"/candle_loader.gif\"\r\n                  alt=\"loading candle chart\"\r\n                  width=\"70%\"\r\n                  height=\"auto\"\r\n                />\r\n            </div>\r\n        );\r\n      } else {\r\n        return(\r\n                <div className=\"my-auto\">\r\n                        <StatsCard\r\n                        label={\"Profit on stocks\"}\r\n                        amount={`$ ${Performance.currentStockProfit}`}\r\n                        icon={\"las la-coins fa-3x float-left\"}\r\n                        prefix={\"$ \"}\r\n                        /><StatsCard\r\n                        label={\"Profit rate on stocks\"}\r\n                        amount={`${Performance.percentageCurrentStockProfit} %`} \r\n                        icon={\"las la-balance-scale fa-3x float-left\"}\r\n                        suffix={\" %\"}\r\n                        /><StatsCard\r\n                            label={\"Profit on portfolio\"}\r\n                            amount={`$ ${Performance.investedCashProfit}`}\r\n                            icon={\"las la-coins fa-3x float-left\"}\r\n                            prefix={\"$ \"} \r\n                        /><StatsCard\r\n                            label={\"Profit rate on portfolio\"}\r\n                            amount={`${Performance.percentageInvestedCashProfit} %`}\r\n                            icon={\"las la-balance-scale fa-3x float-left\"}\r\n                            suffix={\" %\"}\r\n                        />\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\StocksTable.js",["159","160","161","162"],"import React, {useState, useEffect} from 'react';\r\nimport {Row, Col, Card, Table} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport NumberFormat from 'react-number-format'\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n\r\nexport default function StocksTable(){\r\n    const [StockList, setStockList] = useState([]);\r\n    const [Columns, setColumns] = useState([\r\n      {\r\n        dataField: \"stock.name\",\r\n        text: \"Name\",\r\n        sort: true,\r\n        formatter: (cell, row) => <a href={`/stockpage/${row.stock.symbol}`}> {cell} </a>\r\n\r\n      },\r\n      {\r\n        dataField: \"stockTotalAmount\",\r\n        text: \"Amount\",\r\n        sort: true,\r\n        formatter: (cell, row) => <NumberFormat value={cell} displayType={'text'} thousandSeparator={\" \"} decimalScale={2}/>\r\n      },\r\n      {\r\n        dataField: \"averagePurchasePrice\",\r\n        text: \"Avg Price\",\r\n        sort: true,\r\n        formatter: (cell, row) => <NumberFormat value={cell} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n      },\r\n      {\r\n        dataField: \"stockCurrentPrice\",\r\n        text: \"Current Price\", \r\n        sort: true,\r\n        formatter: (cell, row) => <NumberFormat value={cell} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n      },\r\n      {\r\n        dataField: \"totalPurchaseValue\",\r\n        text: \"Purch Value\",\r\n        sort: true,\r\n        formatter: (cell, row) => <NumberFormat value={cell} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n      },\r\n      {\r\n        dataField: \"stockCurrentValue\",\r\n        text: \"Current Value\",\r\n        sort: true,\r\n        formatter: (cell, row) => <NumberFormat value={cell} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n      },\r\n      {\r\n        dataField: \"stockValueChange\",\r\n        text: \"Value change\",\r\n        sort: true,\r\n        formatter: (cell, row) => <NumberFormat value={cell*100} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={\" %\"}/>\r\n      }\r\n    ])\r\n\r\n     \r\n\r\n    useEffect(() => {\r\n      getPortfolioPerformanceList()\r\n      setInterval(() => {\r\n          getPortfolioPerformanceList()\r\n      }, 10000)\r\n    }, [])\r\n\r\n    function getPortfolioPerformanceList(){\r\n      axios\r\n            .get(\"http://localhost:8080/user/getStockPerformanceList\")\r\n            .then((resp) => setStockList(resp.data));\r\n    }\r\n    \r\n    return(\r\n        <div className=\"m-3 border border-info\">          \r\n            <Card>\r\n                <Card.Body>\r\n                    <BootstrapTable bootstrap4 keyField=\"id\" data={StockList} columns={Columns} bordered={false} striped={true} rowStyle={ { fontSize: '16px' } }/>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n    \r\n        \r\n      \r\n    \r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\LineChart.js",["163","164","165"],"import React,{useState, useEffect} from 'react';\r\nimport {Card, Body, Header} from 'react-bootstrap';\r\nimport './LineChart.scss';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function LineChart(props){\r\n    const [Performance, setPerformance] = useState({});\r\n\r\n    useEffect(() => {\r\n        setPerformance(props.portfolioPerformance_LineChart)\r\n    }, [props.portfolioPerformance_LineChart])\r\n\r\n    if (Performance === null) {\r\n        return (\r\n            <div>\r\n                <img\r\n                  className = \"mx-auto d-block\"\r\n                  id=\"loading\"\r\n                  src=\"/candle_loader.gif\"\r\n                  alt=\"loading candle chart\"\r\n                  width=\"70%\"\r\n                  height=\"auto\"\r\n                />\r\n            </div>\r\n        );\r\n      } else {\r\n        return(\r\n            <div className=\"card m-3 border border-info\">\r\n                <Card>\r\n                    <Card.Header>\r\n                        <h3 style={{textAlign:\"center\"}}>Cash/Stock rate</h3>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                    <div className=\"progress\" style={{height:\"2rem\"}}>\r\n                        <div className=\"progress-bar bg-success\" style={{width: `${Performance.percentageCashValue}%`}} role=\"progressbar\" aria-valuenow={Performance.percentageCashValue} aria-valuemin=\"0\" aria-valuemax=\"100\">{Performance.percentageCashValue}</div>\r\n                        <div className=\"progress-bar\" style={{width: `${Performance.percentageStockValue}%`}} role=\"progressbar\" aria-valuenow={Performance.percentageStockValue} aria-valuemin=\"0\" aria-valuemax=\"100\">{Performance.percentageStockValue}</div>\r\n                    </div>  \r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Stockcard.js",["166","167"],"import React,{useState, useEffect, useContext} from 'react';\r\nimport './Stockcard.scss';\r\nimport axios from \"axios\";\r\nimport {MainpageAccountContext} from '../../Dataproviders/AccountProvider';\r\n\r\nexport default function Stockcard(props){\r\n    const [StockData,setStockData] = useState({});\r\n    const [QuoteData, setQuoteData] = useState({});\r\n    const [StockAmount, setStockAmount] = useState(0);\r\n    const [AccData] = useContext(MainpageAccountContext);\r\n    \r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://finnhub.io/api/v1/stock/profile2?symbol=${props.symbol}&token=butt2qv48v6skju2d1tg`)\r\n            .then((resp) =>{\r\n                setStockData(resp.data);\r\n            })\r\n\r\n        axios\r\n            .get(`http://localhost:8080/stock/getquote/${props.symbol}`)\r\n            .then((resp) =>{\r\n                setQuoteData(resp.data);\r\n            })\r\n\r\n        GetStockAmount();\r\n    }, [props.symbol])\r\n\r\n    function GetStockAmount(){\r\n      console.log(\"Stock amount\")\r\n      AccData.stockPerformanceList.map((obj) => {\r\n        if(obj.stock.symbol === props.symbol){\r\n          console.log(obj.stockTotalAmount);\r\n          setStockAmount(obj.stockTotalAmount);\r\n        }\r\n      })\r\n    }\r\n\r\n    \r\n    return(\r\n        <div>\r\n        <div>\r\n          <div className=\"profile-card js-profile-card\">\r\n            <div className=\"profile-card__img\">\r\n              <img src={StockData.logo} alt=\"profile card\" />\r\n            </div>\r\n            <div className=\"profile-card__cnt js-profile-cnt\">\r\n              <div className=\"profile-card__name\">{StockData.name}</div>\r\n              <div className=\"profile-card__txt\"><strong>{StockData.finnhubIndustry}</strong> from<strong> {StockData.country}</strong></div>\r\n              <div className=\"profile-card-loc\">\r\n                <span className=\"profile-card-loc__icon\">\r\n                  <svg className=\"icon\"><use xlinkHref=\"#icon-location\" /></svg>\r\n                </span>\r\n                <span className=\"profile-card-loc__txt\">\r\n                  <a href={StockData.weburl}>{StockData.weburl}</a>\r\n                </span>\r\n              </div>\r\n              <div className=\"profile-card-inf\">\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{`$ ${QuoteData.currentPrice}`}</div>\r\n                  <div className=\"profile-card-inf__txt\"><strong>Current price</strong></div>\r\n                </div>\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{`${StockAmount} pcs.`}</div>\r\n                  <div className=\"profile-card-inf__txt\"><strong>Owned</strong></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"profile-card-inf\">\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{`$ ${QuoteData.openPrice}`}</div>\r\n                  <div className=\"profile-card-inf__txt\">Open price</div>\r\n                </div>\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{`$ ${QuoteData.highPrice}`}</div>\r\n                  <div className=\"profile-card-inf__txt\">High price</div>\r\n                </div>\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{`$ ${QuoteData.lowPrice}`}</div>\r\n                  <div className=\"profile-card-inf__txt\">Low price</div>\r\n                </div>\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{`$ ${QuoteData.previousClosePrice}`}</div>\r\n                  <div className=\"profile-card-inf__txt\">Close price</div>\r\n                </div>\r\n              </div>\r\n                \r\n              <div className=\"profile-card-inf\">\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{StockData.currency}</div>\r\n                  <div className=\"profile-card-inf__txt\">Currency</div>\r\n                </div>\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{`$ ${StockData.marketCapitalization}`}</div>\r\n                  <div className=\"profile-card-inf__txt\">Capitalization</div>\r\n                </div>\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{StockData.shareOutstanding}</div>\r\n                  <div className=\"profile-card-inf__txt\">Outstanding</div>\r\n                </div>\r\n                <div className=\"profile-card-inf__item\">\r\n                  <div className=\"profile-card-inf__title\">{StockData.ipo}</div>\r\n                  <div className=\"profile-card-inf__txt\">IPO</div>\r\n              </div>\r\n            </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <svg hidden=\"hidden\">\r\n  <defs>\r\n    <symbol id=\"icon-location\" viewBox=\"0 0 32 32\">\r\n      <title>location</title>\r\n      <path d=\"M16 31.68c-0.352 0-0.672-0.064-1.024-0.16-0.8-0.256-1.44-0.832-1.824-1.6l-6.784-13.632c-1.664-3.36-1.568-7.328 0.32-10.592 1.856-3.2 4.992-5.152 8.608-5.376h1.376c3.648 0.224 6.752 2.176 8.608 5.376 1.888 3.264 2.016 7.232 0.352 10.592l-6.816 13.664c-0.288 0.608-0.8 1.12-1.408 1.408-0.448 0.224-0.928 0.32-1.408 0.32zM15.392 2.368c-2.88 0.192-5.408 1.76-6.912 4.352-1.536 2.688-1.632 5.92-0.288 8.672l6.816 13.632c0.128 0.256 0.352 0.448 0.64 0.544s0.576 0.064 0.832-0.064c0.224-0.096 0.384-0.288 0.48-0.48l6.816-13.664c1.376-2.752 1.248-5.984-0.288-8.672-1.472-2.56-4-4.128-6.88-4.32h-1.216zM16 17.888c-3.264 0-5.92-2.656-5.92-5.92 0-3.232 2.656-5.888 5.92-5.888s5.92 2.656 5.92 5.92c0 3.264-2.656 5.888-5.92 5.888zM16 8.128c-2.144 0-3.872 1.728-3.872 3.872s1.728 3.872 3.872 3.872 3.872-1.728 3.872-3.872c0-2.144-1.76-3.872-3.872-3.872z\"></path>\r\n      <path d=\"M16 32c-0.384 0-0.736-0.064-1.12-0.192-0.864-0.288-1.568-0.928-1.984-1.728l-6.784-13.664c-1.728-3.456-1.6-7.52 0.352-10.912 1.888-3.264 5.088-5.28 8.832-5.504h1.376c3.744 0.224 6.976 2.24 8.864 5.536 1.952 3.36 2.080 7.424 0.352 10.912l-6.784 13.632c-0.32 0.672-0.896 1.216-1.568 1.568-0.48 0.224-0.992 0.352-1.536 0.352zM15.36 0.64h-0.064c-3.488 0.224-6.56 2.112-8.32 5.216-1.824 3.168-1.952 7.040-0.32 10.304l6.816 13.632c0.32 0.672 0.928 1.184 1.632 1.44s1.472 0.192 2.176-0.16c0.544-0.288 1.024-0.736 1.28-1.28l6.816-13.632c1.632-3.264 1.504-7.136-0.32-10.304-1.824-3.104-4.864-5.024-8.384-5.216h-1.312zM16 29.952c-0.16 0-0.32-0.032-0.448-0.064-0.352-0.128-0.64-0.384-0.8-0.704l-6.816-13.664c-1.408-2.848-1.312-6.176 0.288-8.96 1.536-2.656 4.16-4.32 7.168-4.512h1.216c3.040 0.192 5.632 1.824 7.2 4.512 1.6 2.752 1.696 6.112 0.288 8.96l-6.848 13.632c-0.128 0.288-0.352 0.512-0.64 0.64-0.192 0.096-0.384 0.16-0.608 0.16zM15.424 2.688c-2.784 0.192-5.216 1.696-6.656 4.192-1.504 2.592-1.6 5.696-0.256 8.352l6.816 13.632c0.096 0.192 0.256 0.32 0.448 0.384s0.416 0.064 0.608-0.032c0.16-0.064 0.288-0.192 0.352-0.352l6.816-13.664c1.312-2.656 1.216-5.792-0.288-8.352-1.472-2.464-3.904-4-6.688-4.16h-1.152zM16 18.208c-3.424 0-6.24-2.784-6.24-6.24 0-3.424 2.816-6.208 6.24-6.208s6.24 2.784 6.24 6.24c0 3.424-2.816 6.208-6.24 6.208zM16 6.4c-3.072 0-5.6 2.496-5.6 5.6 0 3.072 2.528 5.6 5.6 5.6s5.6-2.496 5.6-5.6c0-3.104-2.528-5.6-5.6-5.6zM16 16.16c-2.304 0-4.16-1.888-4.16-4.16s1.888-4.16 4.16-4.16c2.304 0 4.16 1.888 4.16 4.16s-1.856 4.16-4.16 4.16zM16 8.448c-1.952 0-3.552 1.6-3.552 3.552s1.6 3.552 3.552 3.552c1.952 0 3.552-1.6 3.552-3.552s-1.6-3.552-3.552-3.552z\"></path>\r\n    </symbol>\r\n  </defs>\r\n</svg>\r\n      </div>)\r\n        \r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Offers.js",["168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport axios from \"axios\";\r\nimport './Offers.css';\r\nimport dayjs from \"dayjs\";\r\nimport {Modal, Button, Card} from 'react-bootstrap';\r\nimport OfferForm from './OfferForm';\r\nimport EditForm from './EditForm';\r\nimport {MainpageAccountContext} from '../../Dataproviders/AccountProvider';\r\nimport OfferModal from './OfferModal.js';\r\nimport OfferModalEdit from './OfferModal_EDIT.js';\r\nimport OfferModalDel from './OfferModal_DEL.js';\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport NumberFormat from 'react-number-format'\r\n\r\n\r\nexport default function Offers(props){\r\n    const [Offers, setOffers] = useState([]);\r\n    const [isFormModalVisible, setisFormModalVisible] = useState(false);\r\n    const [isEditModalVisible, setisEditModalVisible] = useState(false);\r\n    const [Cash, setCash] = useState(0);\r\n    const [Edited, setEdited] = useState({});\r\n    const [Available, setAvailable] = useState(0);\r\n    const [AccData] = useContext(MainpageAccountContext);\r\n    const [isOfferModalVisible, setIsOfferModalVisible] = useState(false);\r\n\r\n\r\n    const getNumberOfStocks = (symbol) => {\r\n      AccData.stockPerformanceList.map((object) => {\r\n        if(object.stock.symbol === symbol){\r\n          setAvailable(object.stockTotalAmount);\r\n        }\r\n      })\r\n    }\r\n\r\n    const [Columns, setColumns] = useState([\r\n      {\r\n          dataField: \"stock.name\",\r\n          text: \"Name\",\r\n          sort: true,\r\n          formatter: (cell, row) => <a href={`/stockpage/${row.stock.symbol}`}> {cell} </a>\r\n  \r\n      },\r\n      {\r\n          dataField: \"quantity\",\r\n          text: \"Quantity\",\r\n          sort: true,\r\n          formatter: (cell, row) => <NumberFormat value={row.quantity} displayType={'text'} thousandSeparator={\" \"} decimalScale={2}/>\r\n      },\r\n      {\r\n          dataField: \"totalValue\",\r\n          text: \"Total Value\",\r\n          sort: true,\r\n          formatter: (cell, row) => <NumberFormat value={row.totalValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n      },\r\n      {\r\n          dataField: \"price\",\r\n          text: \"Price\",\r\n          sort: true,\r\n          formatter: (cell, row) => <NumberFormat value={row.price} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n      },\r\n      {\r\n          dataField: \"offerType\",\r\n          text: \"Offer Type\",\r\n          sort: true,\r\n          formatter: (cell, row) => returnOfferIcon(cell)\r\n          \r\n      },\r\n      {\r\n          dataField: \"offerDate\",\r\n          text: \"Offer Date\",\r\n          sort: true,\r\n          formatter: (cell, row) => <p>{dayjs(cell).format('YYYY MMM DD HH:mm')}</p>\r\n      },\r\n      {\r\n          \r\n          text: <OfferModal symbol={props.symbol} type={\"\"}/>,\r\n          formatter: (cell, row) => <div className=\"d-inline-flex table-data-feature\"><OfferModalEdit symbol={row.stock.symbol} type={row.offerType} quantity={row.quantity} price={row.price} id={row.id}/>\r\n          <OfferModalDel symbol={row.stock.symbol} type={row.offerType} quantity={row.quantity} price={row.price} id={row.id}/></div>\r\n      }\r\n      \r\n  ])\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`http://localhost:8080/user/getoffers/${props.symbol}`)\r\n            .then((resp) =>{\r\n                setOffers(resp.data);\r\n            }) \r\n    }, [props.symbol])\r\n\r\n    function DeleteOffer(id){\r\n        axios\r\n            .delete(`http://localhost:8080/user/deleteoffer/${id}`);\r\n    }\r\n\r\n    function DecideOfferType(i){\r\n        if(Offers[i].offerType === \"BUY\"){\r\n            return(<div className=\"profile-card__button button--blue\">Buy</div>)\r\n        } else{\r\n            return(<div className=\"profile-card__button button--orange\">Sell</div>)\r\n        }\r\n    }\r\n\r\n    function isSpacer(i) {\r\n        if (Offers.length !== i && i !== 0){\r\n            return(<tr className=\"spacer\"></tr>)\r\n        }\r\n    }\r\n\r\n    function returnOfferIcon(type){\r\n      if (type === \"BUY\"){\r\n          return (\r\n              <img\r\n              className = ''\r\n              id='loading'\r\n              src='/buy_cart.png'\r\n              alt='loading buy cart'\r\n              style={{width: 30}}\r\n              height='auto'\r\n            />\r\n          )\r\n      } else if (type === \"SELL\"){\r\n          return (\r\n              <img\r\n              className = \"mx-auto d-block\"\r\n              id=\"loading\"\r\n              src=\"/sell_cart.png\"\r\n              alt=\"loading sell cart\"\r\n              style={{width: 30}}\r\n              height=\"auto\"\r\n              display= 'block'\r\n            />\r\n          )\r\n      }\r\n  }\r\n\r\n    \r\n    function EditModal(props){\r\n        console.log(\"edited\");\r\n        /*\r\n        return(\r\n            <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Edit your offer\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <EditForm available={Available} getNumber={getNumberOfStocks} id={Edited? Edited.id : 0} stock={Edited.stock? Edited.stock.symbol : \"\"} type={Edited? Edited.offerType : \"\"} quantity={Edited? Edited.quantity : 0} price={Edited? Edited.price : 0} cash={Cash}/>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n        )\r\n        */\r\n    }\r\n    \r\n\r\n    return(\r\n        <div className=\"m-3 border border-info\" style={{textAlign: \"center\"}}>\r\n          <Card> \r\n            <Card.Body>\r\n              <BootstrapTable bootstrap4 keyField=\"id\" data={Offers} columns={Columns} bordered={false} striped={true} rowStyle={ { fontSize: '16px' } }/>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      )\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\Chart.js",["190"],"import React,{useEffect, useState} from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport useInterval from 'react-useinterval';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function Chart(props){\r\n    const [SelectedInterval, setSelectedInterval] = useState(1);\r\n    const [StockDataApex, setStockDataApex] = useState([]);\r\n    const [StockData1, setStockData1] = useState([]);\r\n    const [StockData5, setStockData5] = useState([]);\r\n    const [StockDataD, setStockDataD] = useState([]);\r\n\r\n    const [VolumeDataApex, setVolumeDataApex] = useState([]);   \r\n    const [VolumeData1, setVolumeData1] = useState([]);\r\n    const [VolumeData5, setVolumeData5] = useState([]);\r\n    const [VolumeDataD, setVolumeDataD] = useState([]);\r\n\r\n    const [MinDateApex, setMinDateApex] = useState();\r\n    const [MaxDateApex, setMaxDateApex] = useState();\r\n    const [MinDate1, setMinDate1] = useState();\r\n    const [MaxDate1, setMaxDate1] = useState();\r\n    const [MinDate5, setMinDate5] = useState();\r\n    const [MaxDate5, setMaxDate5] = useState();\r\n    const [MinDateD, setMinDateD] = useState();\r\n    const [MaxDateD, setMaxDateD] = useState();\r\n\r\n    const series = [{\r\n      data: StockDataApex\r\n    }];\r\n\r\n    const options = {\r\n      chart: {\r\n        type: 'candlestick',\r\n        height: 350,\r\n        id: 'candles',\r\n        toolbar: {\r\n          autoSelected: 'pan',\r\n          show: true\r\n        },\r\n        zoom: {\r\n          enabled: true\r\n        },\r\n      },\r\n      plotOptions: {\r\n        candlestick: {\r\n          colors: {\r\n            upward: '#3C90EB',\r\n            downward: '#DF7D46'\r\n          }\r\n        }\r\n      },\r\n      xaxis: {\r\n        type: 'datetime'\r\n      }\r\n    };\r\n  \r\n    const seriesBar = [{\r\n      name: 'volume',\r\n      data: VolumeDataApex\r\n    }];\r\n    const optionsBar = {\r\n      chart: {\r\n        height: 160,\r\n        type: 'bar',\r\n        brush: {\r\n          enabled: true,\r\n          target: 'candles',\r\n          autoScaleYaxis: false \r\n        },\r\n        selection: {\r\n          enabled: true,\r\n          xaxis: {\r\n            min: MinDateApex,\r\n            max: MaxDateApex\r\n          },\r\n          fill: {\r\n            color: '#ccc',\r\n            opacity: 0.4\r\n          },\r\n          stroke: {\r\n            color: '#0D47A1',\r\n          }\r\n        },\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          columnWidth: '80%',\r\n          colors: {\r\n            ranges: [{\r\n              from: -1000,\r\n              to: 0,\r\n              color: '#F15B46'\r\n            }, {\r\n              from: 1,\r\n              to: 1000,\r\n              color: '#FEB019'\r\n            }],\r\n      \r\n          },\r\n        }\r\n      },\r\n      stroke: {\r\n        width: 0\r\n      },\r\n      xaxis: {\r\n        type: 'datetime',\r\n        axisBorder: {\r\n          offsetX: 0\r\n        }\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          show: true,\r\n        }\r\n      }\r\n    };\r\n\r\n    function ChangeInterval(interval){\r\n      if(interval === 1){\r\n        setMinDateApex(MinDate1);\r\n        setMaxDateApex(MaxDate1);\r\n        setStockDataApex(StockData1);\r\n        setVolumeDataApex(VolumeData1);\r\n        setSelectedInterval(1);\r\n      } else if(interval === 5) {\r\n        setMinDateApex(MinDate5);\r\n        setMaxDateApex(MaxDate5);\r\n        setStockDataApex(StockData5);\r\n        setVolumeDataApex(VolumeData5);\r\n        setSelectedInterval(5);\r\n      } else{\r\n        setMinDateApex(MinDateD);\r\n        setMaxDateApex(MaxDateD);\r\n        setStockDataApex(StockDataD);\r\n        setVolumeDataApex(VolumeDataD);\r\n        setSelectedInterval(24);\r\n      }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8080/stock/getcandle/${props.symbol}`)\r\n          .then((resp) => {\r\n            setStockData1(resp.data.reactCandle1.reactCandleDataList)\r\n            setVolumeData1(resp.data.reactCandle1.reactVolumeDataList)\r\n            setMinDate1(resp.data.reactCandle1.reactCandleDataList[0].x)\r\n            setMaxDate1(resp.data.reactCandle1.reactCandleDataList[(resp.data.reactCandle1.reactCandleDataList.length)-1].x)\r\n            \r\n            setStockData5(resp.data.reactCandle5.reactCandleDataList)\r\n            setVolumeData5(resp.data.reactCandle5.reactVolumeDataList)\r\n            setMinDate5(resp.data.reactCandle5.reactCandleDataList[0].x)\r\n            setMaxDate5(resp.data.reactCandle5.reactCandleDataList[(resp.data.reactCandle5.reactCandleDataList.length)-1].x)\r\n\r\n            setStockDataD(resp.data.reactCandleD.reactCandleDataList)\r\n            setVolumeDataD(resp.data.reactCandleD.reactVolumeDataList)\r\n            setMinDateD(resp.data.reactCandleD.reactCandleDataList[0].x)\r\n            setMaxDateD(resp.data.reactCandleD.reactCandleDataList[(resp.data.reactCandleD.reactCandleDataList.length)-1].x)\r\n\r\n\r\n            setMinDateApex(resp.data.reactCandle1.reactCandleDataList[0].x)\r\n            setMaxDateApex(resp.data.reactCandle1.reactCandleDataList[(resp.data.reactCandle1.reactCandleDataList.length)-1].x)\r\n            \r\n            setStockDataApex(resp.data.reactCandle1.reactCandleDataList)\r\n            setVolumeDataApex(resp.data.reactCandle1.reactVolumeDataList)\r\n            console.log(resp.data)\r\n\r\n          })\r\n          /*\r\n          setInterval(() => {\r\n            axios\r\n                .get(`http://localhost:8080/stock/getcandle/${props.symbol}/1`)\r\n                .then((resp) => {\r\n                  setStockData1(resp.data.reactCandle1.reactCandleDataList)\r\n                  setVolumeData1(resp.data.reactCandle1.reactVolumeDataList)\r\n                  setMinDate1(resp.data.reactCandle1.reactCandleDataList[0].x)\r\n                  setMaxDate1(resp.data.reactCandle1.reactCandleDataList[(resp.data.reactCandle1.reactCandleDataList.length)-1].x)\r\n                  console.log(`updating 1 minute!!! ${new Date().getMinutes()} ${new Date().getSeconds()}`)\r\n                })\r\n        }, 10000)\r\n\r\n        setInterval(() => {\r\n          axios\r\n              .get(`http://localhost:8080/stock/getcandle/${props.symbol}/5`)\r\n              .then((resp) => {\r\n                setStockData5(resp.data.reactCandle5.reactCandleDataList)\r\n                setVolumeData5(resp.data.reactCandle5.reactVolumeDataList)\r\n                setMinDate5(resp.data.reactCandle5.reactCandleDataList[0].x)\r\n                setMaxDate5(resp.data.reactCandle5.reactCandleDataList[(resp.data.reactCandle5.reactCandleDataList.length)-1].x)\r\n                console.log(`updating 5 minute!!! ${new Date().getMinutes()} ${new Date().getSeconds()}`)\r\n              })\r\n      }, 15000)\r\n      */\r\n        \r\n    }, [])\r\n\r\n    useInterval(() => {\r\n      axios\r\n          .get(`http://localhost:8080/stock/getcandle/${props.symbol}/1`)\r\n          .then((resp) => {\r\n            setStockData1(resp.data.reactCandle1.reactCandleDataList)\r\n            setVolumeData1(resp.data.reactCandle1.reactVolumeDataList)\r\n            setMinDate1(resp.data.reactCandle1.reactCandleDataList[0].x)\r\n            setMaxDate1(resp.data.reactCandle1.reactCandleDataList[(resp.data.reactCandle1.reactCandleDataList.length)-1].x)\r\n            if (SelectedInterval === 1){\r\n              ChangeInterval(1)\r\n            }\r\n            console.log(`updating 1 minute!!! ${new Date().getMinutes()} ${new Date().getSeconds()}`)\r\n          })\r\n  }, 10000);\r\n\r\n  useInterval(() => {     \r\n      axios\r\n          .get(`http://localhost:8080/stock/getcandle/${props.symbol}/5`)\r\n          .then((resp) => {\r\n            setStockData5(resp.data.reactCandle5.reactCandleDataList)\r\n            setVolumeData5(resp.data.reactCandle5.reactVolumeDataList)\r\n            setMinDate5(resp.data.reactCandle5.reactCandleDataList[0].x)\r\n            setMaxDate5(resp.data.reactCandle5.reactCandleDataList[(resp.data.reactCandle5.reactCandleDataList.length)-1].x)\r\n            if (SelectedInterval === 5){\r\n              ChangeInterval(5)\r\n            }\r\n            console.log(`updating 5 minute!!! ${new Date().getMinutes()} ${new Date().getSeconds()}`)\r\n          })\r\n  }, 17000);\r\n\r\n\r\n    \r\n    if (VolumeDataApex.length < 1 && StockDataApex < 1) {\r\n      return (\r\n          <div>\r\n              <img\r\n                className = \"mx-auto d-block\"\r\n                id=\"loading\"\r\n                src=\"/candle_loader.gif\"\r\n                alt=\"loading candle chart\"\r\n                width=\"70%\"\r\n                height=\"auto\"\r\n              />\r\n          </div>\r\n      );\r\n    } else {\r\n    return(\r\n      <div className=\"chart-box\" style={{boxShadow: \"0px 8px 60px -10px rgba(13, 28, 39, 0.6)\"}}>\r\n        <h3 className=\"ml-3\">Selected: {SelectedInterval}</h3>\r\n        <ul className=\"pagination ml-3 mt-3\">\r\n          <li className=\"page-item\"><button className=\"page-link\" onClick={_ =>ChangeInterval(1)}>1 MIN</button></li>\r\n          <li className=\"page-item\"><button className=\"page-link\" onClick={_ =>ChangeInterval(5)}>5 MIN</button></li>\r\n          <li className=\"page-item\"><button className=\"page-link\" onClick={_ =>ChangeInterval(\"D\")}>DAY</button></li>\r\n        </ul>\r\n        <div id=\"chart-candlestick\">\r\n            <ReactApexChart options={options} series={series} type=\"candlestick\" height={500} width={\"100%\"} />\r\n        </div>\r\n        <div id=\"chart-bar\">\r\n          <ReactApexChart options={optionsBar} series={seriesBar} type=\"bar\" height={260} />\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\StatsCard.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\EditForm.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Piechart.js",["191"],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\Profile.js",["192"],"import React,{useState, useEffect} from 'react';\r\nimport './Profile.scss';\r\nimport axios from \"axios\";\r\nimport { Link } from 'react-router-dom';\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport default function Profile(props){\r\n  const [ProfileData, setProfileData] = useState({});\r\n\r\n  useEffect(() => {\r\n    axios \r\n      .get(`http://localhost:8080/user/getprofilecardinfo`)\r\n      .then((resp) => setProfileData(resp.data));\r\n  }, [])\r\n\r\n    return(\r\n            <div>\r\n                <div className=\"\">\r\n                  <div className=\"profile-card__img\">\r\n                    <img src={ProfileData.profilePic} alt=\"profile card\" />\r\n                  </div>\r\n                  <div className=\"profile-card__cnt js-profile-cnt\">\r\n                    <div className=\"profile-card__name\">{ProfileData.username}</div>\r\n                    <div className=\"profile-card-loc\">{ProfileData.nickName}</div>\r\n                    <div className=\"profile-card-inf\">\r\n                      <div className=\"profile-card-inf__item\">\r\n                        <div className=\"profile-card-inf__title\">{<NumberFormat value={props.totalPortfolioValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={'$ '}/>} </div>\r\n                        <div className=\"profile-card-inf__txt\">Total portfolio value</div>\r\n                      </div>\r\n                      <div className=\"profile-card-inf__item\">\r\n                        <div className=\"profile-card-inf__title\">{<NumberFormat value={props.investedCash} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={'$ '}/>}</div>\r\n                        <div className=\"profile-card-inf__txt\">Cash invested</div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                  </div>\r\n                </div>\r\n            </div>\r\n          );\r\n\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\StockProfile.js",["193","194","195","196","197","198","199","200","201","202"],"import React,{useState, useEffect} from 'react';\r\nimport axios from \"axios\";\r\nimport DayJS from \"react-dayjs\";\r\nimport dayjs from 'dayjs';\r\nimport {Modal, Button} from 'react-bootstrap';\r\nimport OfferForm from '../DetailedStockPage/OfferForm';\r\nimport OfferModalBuy from './OfferModal_BUY.js';\r\nimport OfferModalSell from './OfferModal_SELL.js';\r\n\r\nexport default function StockProfile(props){\r\n  const [StockData, setStockData] = useState({});\r\n  const [StockList, setStockList] = useState([]);\r\n  const [Type, setType] = useState(\"\");\r\n  const [isFormModalVisible, setisFormModalVisible] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    axios \r\n      .get(`http://localhost:8080/stock/getstock/${props.symbol}`)\r\n      .then((resp) =>{\r\n          setStockData(resp.data)\r\n          setStockList(StockList => [...StockList, props.symbol])\r\n        })\r\n  }, [])\r\n\r\n\r\n    return(\r\n            <div>\r\n                <div className=\"\">\r\n                  <div className=\"profile-card__img\">\r\n                    <img src={StockData.logo} alt=\"profile card\" />\r\n                  </div>\r\n                  <div className=\"profile-card__cnt js-profile-cnt\">\r\n                    <div className=\"profile-card__name\">{StockData.name}</div>\r\n                    <div className=\"profile-card__txt\">\r\n                        <strong>{StockData.industry} </strong>\r\n                        from\r\n                        <strong> {StockData.country}</strong>\r\n                    </div>\r\n                    <div className=\"profile-card__txt\">\r\n                        <a href={StockData.weburl} target=\"_blank\" rel=\"noopener noreferrer\">{StockData.weburl}</a>\r\n                    </div>\r\n                    <div className=\"profile-card__txt\">\r\n                        Exchange: {StockData.exchange}\r\n                    </div>\r\n                    <div className=\"profile-card__txt\">\r\n                        IPO: { dayjs(StockData.ipo).format('DD/MM/YYYY')}\r\n                    </div>\r\n\r\n                    <div className=\"profile-card-loc\">\r\n                      <span className=\"profile-card-loc__txt\">\r\n                        {StockData.nickName} \r\n                      </span>\r\n                    </div>\r\n\r\n                    {/*profile-card-ctr*/}\r\n                    <div className=\"d-flex justify-content-center container\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm\">\r\n                          <OfferModalBuy symbol={props.symbol} type={\"\"}/>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                          <OfferModalSell symbol={props.symbol} type={\"\"}/>\r\n                        </div>\r\n                    </div>\r\n                      </div>\r\n                      \r\n                  </div>\r\n                </div>\r\n              \r\n            </div>\r\n          );\r\n\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\StockPerformance.js",["203"],"import React,{useState, useEffect} from 'react';\r\n//import './Portfolioperformance.css';\r\nimport StockStatsCard from './StockStatsCard';\r\nimport axios from 'axios';\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport default function Portfolioperformance(props) {\r\n    const [StockPerformance, setStockPerformance] = useState({});\r\n\r\n    useEffect(() => {\r\n        getStockPerformance();\r\n        setInterval(() => {\r\n            getStockPerformance();\r\n        }, 20000)\r\n\r\n    }, [])\r\n\r\n\r\n    function getStockPerformance() {\r\n        axios\r\n            .get(`http://localhost:8080/user/getStockPerformance/${props.symbol}`)\r\n            .then((resp) => {\r\n                setStockPerformance(resp.data)\r\n                console.log(\"getStockPerfomanceList\")\r\n                console.log(resp.data)\r\n            })\r\n    }\r\n\r\n    if (StockPerformance == null) {\r\n        return (\r\n            <div>\r\n                <img\r\n                  className = \"mx-auto d-block\"\r\n                  id=\"loading\"\r\n                  src=\"/candle_loader.gif\"\r\n                  alt=\"loading candle chart\"\r\n                  width=\"70%\"\r\n                  height=\"auto\"\r\n                />\r\n            </div>\r\n        );\r\n      } else {\r\n    return(\r\n        <div class=\"container w-100\">\r\n            <div class=\"col align-self-center\">\r\n                <StockStatsCard\r\n                    label={\"Current price\"}\r\n                    amount={<NumberFormat value={StockPerformance.stockCurrentPrice} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={'$ '}/> }\r\n                    icon={\"las la-hand-holding-usd font-large-3 float-left\"}\r\n                />\r\n                <StockStatsCard\r\n                    label={\"Number of stocks\"}\r\n                    amount={<NumberFormat value={StockPerformance.stockTotalAmount} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={' pcs'}/>}\r\n                    icon={\"las la-atom font-large-3 float-left\"}\r\n                />\r\n                <StockStatsCard\r\n                    label={\"Avg. pruchase price\"}\r\n                    amount={<NumberFormat value={StockPerformance.averagePurchasePrice} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={'$ '}/>}\r\n                    icon={\"las la-money-bill font-large-3 float-left\"}\r\n                />\r\n                <StockStatsCard\r\n                    label={\"Stock value change\"}\r\n                    amount={<NumberFormat value={StockPerformance.stockValueChange * 100} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={' %'}/>}\r\n                    icon={\"las la-percent font-large-3 float-left\"}\r\n                />\r\n                <StockStatsCard\r\n                    label={\"Purchase value\"}\r\n                    amount={<NumberFormat value={StockPerformance.totalPurchaseValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={'$ '}/>}  \r\n                    icon={\"las la-laptop-code font-large-3 float-left\"}\r\n                />\r\n                <StockStatsCard\r\n                    label={\"Current value\"}\r\n                    amount={<NumberFormat value={StockPerformance.stockCurrentValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={'$ '}/>}\r\n                    icon={\"las la-dollar-sign font-large-3 float-left\"}\r\n                />\r\n\r\n\r\n            </div>\r\n        </div>\r\n      )\r\n    }\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferForm.js",["204"],"import React,{useState, useEffect} from 'react';\r\nimport {Form, Button, Row, Col, Alert} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nexport default function OfferForm(props){\r\n    const [StockList, setStockList] = useState([]);\r\n    const [Stock, setStock] = useState(\"\");\r\n    const [Type, setType] = useState(\"CHOOSE TYPE\");\r\n    const [Price, setPrice] = useState(0);\r\n    const [Quantity, setQuantity] = useState(0);\r\n    const [CashAvailable, setCashAvailable] = useState(0);\r\n    const [MoneyNeeded, setMoneyNeeded] = useState(0);\r\n    const [Variant, setVariant] = useState(\"\");\r\n    const [AlertText, setAlertText] = useState(\"\");\r\n    const [MoneyWorth, setMoneyWorth] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getStockList()\r\n        if (props.stock !== \"\"){\r\n            setStock(props.stock)\r\n        } else {\r\n            setStock(props.stockList[0])\r\n        }\r\n        \r\n        setStock(props.stockList[0])\r\n        if (props.type !== \"\"){\r\n            setType(props.type)\r\n        }\r\n        getStockDataForOffer();\r\n    }, [Stock, props.symbol])\r\n\r\n\r\n\r\n    function placeOffer() {\r\n        axios\r\n            .post(`http://localhost:8080/user/placeoffer/${Stock}/${Type}/${Quantity}/${Price}`)\r\n            .then((resp) => {\r\n                if(resp.status===200){\r\n                    setAlertText(resp.data);\r\n                    setVariant(\"danger\");\r\n                    alert(resp.data)\r\n                }\r\n            });\r\n    }\r\n\r\n    function getStockDataForOffer() {\r\n        axios\r\n            .get(`http://localhost:8080/user/getStockDataForOffer/${Stock}`)\r\n            .then((resp) => {\r\n                setQuantity(resp.data.stockQuantity);\r\n                setCashAvailable(resp.data.availableCash);\r\n            });\r\n    }\r\n\r\n    function getStockList() {\r\n        axios\r\n            .get(`http://localhost:8080/stock/getStockSymbols/`)\r\n            .then((resp) => {\r\n                setStockList(resp.data);\r\n            });\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setMoneyNeeded(Price * Quantity);\r\n        setMoneyWorth(Price * Quantity);\r\n    }, [Price, Quantity])\r\n\r\n    return( \r\n        <Form onSubmit={placeOffer}>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group>\r\n                        <Form.Label>Select your stock</Form.Label>\r\n                            <Form.Control as=\"select\" onSelect={e => {setStock(e.target.value)}} required value={Stock}>\r\n                                {StockList.map( (stock) => {\r\n                                    return (\r\n                                            <option value={stock.symbol}>{Stock}</option>\r\n                                        )\r\n                                    }\r\n                                    )\r\n                                }\r\n                            </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Group controlId=\"type\">\r\n                        <Form.Label>Select action</Form.Label>\r\n                            <Form.Control as=\"select\" onChange={e => setType(e.target.value)} value={Type} required>\r\n                                <option value={\"BUY\"}>Buy</option>\r\n                                <option value={\"SELL\"}>Sell</option>\r\n                            </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n                \r\n            </Row>\r\n            <Row>\r\n                \r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group controllId=\"price\">\r\n                            <Form.Label>Desired quantity</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Quantity\" onChange={e => setQuantity(e.target.value)} required/>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                    <Form.Group controllId=\"price\">\r\n                            <Form.Label>Desired price in $</Form.Label>\r\n                            <Form.Control type=\"number\" placeholder=\"Price\" onChange={e => setPrice(e.target.value)} required/>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <div className=\"mx-auto row row-eq-height\">\r\n                <Col>\r\n                    <Button type=\"submit\" >Submit offer</Button>\r\n                </Col>\r\n                <Col>\r\n                    <div className=\"border border-primary text-center\">\r\n                        {Type===\"BUY\"? <h3>You have: <br />{<NumberFormat value={CashAvailable} displayType={'text'} thousandSeparator={true} prefix={\"$ \"}/>}</h3> : <p></p>}\r\n                        {Type===\"SELL\"? <h3>Number: <br /> {<NumberFormat value={Quantity} displayType={'text'} thousandSeparator={true} suffix={\"pcs\"}/>}</h3> : <p></p>}\r\n                    </div>\r\n                </Col>\r\n                <Col>\r\n                    <div className=\"border border-primary text-center\">\r\n                        {Type===\"BUY\"? <h3>You need: <br /> {<NumberFormat value={MoneyNeeded} displayType={'text'} thousandSeparator={true} prefix={\"$ \"}/>}</h3> : <p></p>}\r\n                        {Type===\"SELL\"? <h3>You will get: <br /> {<NumberFormat value={MoneyWorth} displayType={'text'} thousandSeparator={true} prefix={\"$ \"}/>}</h3> : <p></p>}\r\n                    </div>\r\n                </Col>\r\n            </div>\r\n\t\t\t<Row>\r\n                <Col>\r\n                    <Alert variant={Variant} show={AlertText? true : false}>\r\n                        {AlertText}\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n\t\t\t</Form>\r\n\r\n    )\r\n}","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\StockStatsCard.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\StockListPage\\StockList.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\StockListPage\\AreaChart.js",["205","206","207"],"import React,{useEffect, useState} from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport useInterval from 'react-useinterval';\r\nimport axios from 'axios';\r\n\r\nexport default function AreaChart(props) {\r\n    const [Series, setSeries] = useState([]);\r\n    const [Dates, setDates] = useState([]);\r\n\r\n    /*\r\n    function GetData(){\r\n\r\n      setDates([1, 2, 3]);\r\n      setSeries([1,3,2]);\r\n    }\r\n    */\r\n\r\n    useEffect(() => {\r\n      setSeries(props.series);\r\n      setDates(props.dates);\r\n    }, [])\r\n\r\n    /*\r\n    useInterval(() => {\r\n      GetData();\r\n      console.log('UPDATING 10 SECS')\r\n    }, 10000);\r\n\r\n    */\r\n\r\n    const series = [{\r\n        name: \"Value\",\r\n        data: Series\r\n    }];\r\n\r\n    const options = {\r\n        chart: {\r\n            type: 'area',\r\n            zoom: {\r\n              enabled: false\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n          labels: Dates, \r\n          xaxis: {\r\n            type: 'datetime',\r\n            labels: {\r\n              show: false,\r\n              format: 'dd/MMM/yy'\r\n            }\r\n          },\r\n          yaxis: {\r\n            type: 'disable',\r\n            show: false,\r\n            showAlways: false,\r\n          },\r\n          legend: {\r\n            horizontalAlign: 'left'\r\n          },\r\n      };\r\n  \r\n\r\n\r\n\r\n    return (\r\n        <div className=\"border\">\r\n            <ReactApexChart options={options} series={series} type=\"area\" height={'100%'}/> \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\MainPage\\OffersTable.js",["208","209","210","211"],"import React, {useState, useEffect} from 'react';\r\nimport {Row, Col, Card, Table} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport NumberFormat from 'react-number-format'\r\nimport dayjs from \"dayjs\";\r\nimport OfferModal from '../DetailedStockPage/OfferModal.js';\r\nimport OfferModalEdit from '../DetailedStockPage/OfferModal_EDIT.js'\r\nimport OfferModalDel from '../DetailedStockPage/OfferModal_DEL.js'\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\n\r\n\r\n\r\nexport default function StocksTable(){\r\n    const [OfferList, setOfferList] = useState([]);\r\n    const [Columns, setColumns] = useState([\r\n        {\r\n            dataField: \"stock.name\",\r\n            text: \"Name\",\r\n            sort: true,\r\n            formatter: (cell, row) => <a href={`/stockpage/${row.stock.symbol}`}> {cell} </a>\r\n    \r\n        },\r\n        {\r\n            dataField: \"quantity\",\r\n            text: \"Quantity\",\r\n            sort: true,\r\n            formatter: (cell, row) => <NumberFormat value={row.quantity} displayType={'text'} thousandSeparator={\" \"} decimalScale={2}/>\r\n        },\r\n        {\r\n            dataField: \"totalValue\",\r\n            text: \"Total Value\",\r\n            sort: true,\r\n            formatter: (cell, row) => <NumberFormat value={row.totalValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n        },\r\n        {\r\n            dataField: \"price\",\r\n            text: \"Price\",\r\n            sort: true, \r\n            formatter: (cell, row) => <NumberFormat value={row.price} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>\r\n        },\r\n        {\r\n            dataField: \"offerType\",\r\n            text: \"Offer Type\",\r\n            sort: true,\r\n            formatter: (cell, row) => returnOfferIcon(cell)\r\n            \r\n        },\r\n        {\r\n            dataField: \"offerDate\",\r\n            text: \"Offer Date\",\r\n            sort: true,\r\n            formatter: (cell, row) => <p>{dayjs(cell).format('YYYY MMM DD HH:mm')}</p>\r\n        },\r\n        {\r\n            \r\n            text: <OfferModal symbol={\"\"} type={\"\"}/>,\r\n            formatter: (cell, row) => <div className=\"d-inline-flex table-data-feature\"><OfferModalEdit symbol={row.stock.symbol} type={row.offerType} quantity={row.quantity} price={row.price} id={row.id}/>\r\n            <OfferModalDel symbol={row.stock.symbol} type={row.offerType} quantity={row.quantity} price={row.price} id={row.id}/></div>\r\n        }\r\n        \r\n    ])\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(\"http://localhost:8080/user/getalloffers\")\r\n            .then((resp) => setOfferList(resp.data));\r\n\r\n    }, []) \r\n\r\n    function returnOfferIcon(type){\r\n        if (type === \"BUY\"){\r\n            return (\r\n                <img\r\n                className = ''\r\n                id='loading'\r\n                src='/buy_cart.png'\r\n                alt='loading buy cart'\r\n                style={{width: 30}}\r\n                height='auto'\r\n              />\r\n            )\r\n        } else if (type === \"SELL\"){\r\n            return (\r\n                <img\r\n                className = \"mx-auto d-block\"\r\n                id=\"loading\"\r\n                src=\"/sell_cart.png\"\r\n                alt=\"loading sell cart\"\r\n                style={{width: 30}}\r\n                height=\"auto\"\r\n                display= 'block'\r\n              />\r\n            )\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className=\"m-3 border border-info\">\r\n            <Card>\r\n                <Card.Body>\r\n                    <BootstrapTable bootstrap4 keyField=\"id\" data={OfferList} columns={Columns} bordered={false} striped={true} rowStyle={ {fontSize: '16px'} }/>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n      )\r\n    \r\n} ","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_SELL.js",["212","213"],"import React, {useState, useEffect} from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Form, Row, Col, Alert} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\n\r\nexport default function OfferModal(props) {\r\n    const [show, setShow] = useState(false);\r\n    const [SymbolList, setSymbolList] = useState([]);\r\n    const [Symbol, setSymbol] = useState(\"\");\r\n    const [Type, setType] = useState(\"SELL\");\r\n\r\n    //SELL\r\n    const [QuantityAvailable, setQuantityAvailable] = useState(0);\r\n    //BUY\r\n    const [CashAvailable, setCashAvailable] = useState(0);\r\n\r\n    //BUY-SELL\r\n    const [Price, setPrice] = useState(0);\r\n    const [Quantity, setQuantity] = useState(0);\r\n    const [TransactionValue, setTransactionValue] = useState(0);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n \r\n\r\n    useEffect(() => {\r\n        getSymbolList()\r\n        if (props.symbol !== \"\"){\r\n            setSymbol(props.symbol)\r\n            getStockDataForOffer(props.symbol)\r\n        } else {\r\n            setSymbol(SymbolList[0])\r\n        }\r\n        if (props.type !== \"\"){\r\n            setType(props.type)\r\n        };\r\n    }, []) \r\n\r\n    useEffect(() => {\r\n        setTransactionValue(Price * Quantity);\r\n    }, [Price, Quantity])\r\n\r\n\r\n    function placeOffer() {\r\n        console.log(`http://localhost:8080/user/placeoffer/${Symbol}/${Type}/${Quantity}/${Price}`)\r\n        axios\r\n            .post(`http://localhost:8080/user/placeoffer/${Symbol}/${Type}/${Quantity}/${Price}`)\r\n            .then((resp) => {\r\n                alert(resp.data)\r\n                setTimeout(() => {console.log(\"setTimeout\")}, 200)\r\n                if(resp.data === \"Offer Accepted!\"){\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    function getStockDataForOffer(requestedSymbol) {\r\n        console.log(\"updating: \"+requestedSymbol)\r\n            axios\r\n                .get(`http://localhost:8080/user/getStockDataForOffer/${requestedSymbol}`)\r\n                .then((resp) => {\r\n                    console.log(resp.data)\r\n                    setQuantityAvailable(resp.data.stockQuantity);\r\n                    setCashAvailable(resp.data.availableCash);\r\n                });\r\n    }\r\n\r\n    function getSymbolList() {\r\n        axios\r\n            .get(`http://localhost:8080/stock/getStockSymbols`)\r\n            .then((resp) => {\r\n                setSymbolList(resp.data);\r\n            });\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button className=\"profile-card__button button--orange\" onClick={_=> {handleShow(); setPrice(0); setQuantity(0)}}>\r\n                SELL\r\n            </button>\r\n             <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Place offer</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form action=\"#\" onSubmit={placeOffer}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Select your stock</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => {getStockDataForOffer(e.target.value); setSymbol(e.target.value)}} required defaultValue={Symbol}>\r\n                                            {SymbolList.map( (symbol) => {\r\n                                                return (\r\n                                                        <option value={symbol}>{symbol}</option>\r\n                                                    )\r\n                                                }\r\n                                                )\r\n                                            }\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId=\"type\">\r\n                                    <Form.Label>Select action</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => setType(e.target.value)} defaultValue=\"SELL\" required>\r\n                                            <option value={\"BUY\"}>Buy</option>\r\n                                            <option value={\"SELL\"}>Sell</option>\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired quantity</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder=\"Quantity\" onChange={e => setQuantity(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired price in $</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder=\"Price\" onChange={e => setPrice(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"mx-auto row row-eq-height\">\r\n\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Cash available:</h8> <br /><h5>{<NumberFormat value={CashAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Stock available:</h8> <br /> <h5>{<NumberFormat value={QuantityAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={\" pcs\"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                        </div>\r\n                        <Row>\r\n                            <Col>\r\n                            {/*\r\n                                <Alert variant={Variant} show={AlertText? true : false}>\r\n                                    {AlertText}\r\n                                </Alert>\r\n                            */}\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button type=\"submit\" variant=\"primary\" className=\"mt-2\">\r\n                                SUBMIT\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    CANCEL\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_BUY.js",["214","215"],"import React, {useState, useEffect} from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Form, Row, Col, Alert} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\n\r\nexport default function OfferModal(props) {\r\n    const [show, setShow] = useState(false);\r\n    const [SymbolList, setSymbolList] = useState([]);\r\n    const [Symbol, setSymbol] = useState(\"\");\r\n    const [Type, setType] = useState(\"BUY\");\r\n\r\n    //SELL\r\n    const [QuantityAvailable, setQuantityAvailable] = useState(0);\r\n    //BUY\r\n    const [CashAvailable, setCashAvailable] = useState(0);\r\n\r\n    //BUY-SELL\r\n    const [Price, setPrice] = useState(0);\r\n    const [Quantity, setQuantity] = useState(0);\r\n    const [TransactionValue, setTransactionValue] = useState(0);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n \r\n\r\n    useEffect(() => {\r\n        getSymbolList()\r\n        if (props.symbol !== \"\"){\r\n            setSymbol(props.symbol)\r\n            getStockDataForOffer(props.symbol)\r\n        } else {\r\n            setSymbol(SymbolList[0])\r\n        }\r\n        if (props.type !== \"\"){\r\n            setType(props.type)\r\n        };\r\n    }, []) \r\n\r\n    useEffect(() => {\r\n        setTransactionValue(Price * Quantity);\r\n    }, [Price, Quantity])\r\n\r\n\r\n    function placeOffer() {\r\n        console.log(`http://localhost:8080/user/placeoffer/${Symbol}/${Type}/${Quantity}/${Price}`)\r\n        axios\r\n            .post(`http://localhost:8080/user/placeoffer/${Symbol}/${Type}/${Quantity}/${Price}`)\r\n            .then((resp) => {\r\n                alert(resp.data)\r\n                setTimeout(() => {console.log(\"setTimeout\")}, 200)\r\n                if(resp.data === \"Offer Accepted!\"){\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    function getStockDataForOffer(requestedSymbol) {\r\n        console.log(\"updating: \"+requestedSymbol)\r\n            axios\r\n                .get(`http://localhost:8080/user/getStockDataForOffer/${requestedSymbol}`)\r\n                .then((resp) => {\r\n                    console.log(resp.data)\r\n                    setQuantityAvailable(resp.data.stockQuantity);\r\n                    setCashAvailable(resp.data.availableCash);\r\n                });\r\n    }\r\n\r\n    function getSymbolList() {\r\n        axios\r\n            .get(`http://localhost:8080/stock/getStockSymbols`)\r\n            .then((resp) => {\r\n                setSymbolList(resp.data);\r\n            });\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button className=\"profile-card__button button--blue\" onClick={_=> {handleShow(); setPrice(0); setQuantity(0)}}>\r\n                BUY\r\n            </button>\r\n             <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Place Offer</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form action=\"#\" onSubmit={placeOffer}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Select your stock</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => {getStockDataForOffer(e.target.value); setSymbol(e.target.value)}} required defaultValue={Symbol}>\r\n                                            {SymbolList.map( (symbol) => {\r\n                                                return (\r\n                                                        <option value={symbol}>{symbol}</option>\r\n                                                    )\r\n                                                }\r\n                                                )\r\n                                            }\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId=\"type\">\r\n                                    <Form.Label>Select action</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => setType(e.target.value)} defaultValue=\"BUY\" required>\r\n                                            <option value={\"BUY\"}>Buy</option>\r\n                                            <option value={\"SELL\"}>Sell</option>\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired quantity</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder=\"Quantity\" onChange={e => setQuantity(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired price in $</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder=\"Price\" onChange={e => setPrice(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"mx-auto row row-eq-height\">\r\n\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Cash available:</h8> <br /><h5>{<NumberFormat value={CashAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Stock available:</h8> <br /> <h5>{<NumberFormat value={QuantityAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={\" pcs\"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                        </div>\r\n                        <Row>\r\n                            <Col>\r\n                            {/*\r\n                                <Alert variant={Variant} show={AlertText? true : false}>\r\n                                    {AlertText}\r\n                                </Alert>\r\n                            */}\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button type=\"submit\" variant=\"primary\" className=\"mt-2\">\r\n                                SUBMIT\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    CANCEL\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_DEL.js",["216","217","218","219","220"],"import React, {useState, useEffect} from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Form, Row, Col, Alert} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\n\r\nexport default function OfferModal(props) {\r\n    const [show, setShow] = useState(false);\r\n    const [Symbol, setSymbol] = useState(\"\");\r\n    const [Type, setType] = useState(\"\");\r\n\r\n    //SELL\r\n    const [QuantityAvailable, setQuantityAvailable] = useState(0);\r\n    //BUY\r\n    const [CashAvailable, setCashAvailable] = useState(0);\r\n\r\n    //BUY-SELL\r\n    const [Price, setPrice] = useState(0);\r\n    const [Quantity, setQuantity] = useState(0);\r\n    const [TransactionValue, setTransactionValue] = useState(0);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n \r\n    \r\n\r\n    useEffect(() => {\r\n        setSymbol(props.symbol)\r\n        getStockDataForOffer(props.symbol)\r\n        setType(props.type)\r\n        setQuantity(props.quantity)\r\n        setPrice(props.price)\r\n        setTransactionValue(props.price * props.quantity)\r\n        //setId(props.id)\r\n\r\n    }, []) \r\n\r\n\r\n    function deleteOffer() {\r\n        axios\r\n            .delete(`http://localhost:8080/user/deleteoffer/${props.id}`)\r\n            .then((resp) => {\r\n                alert(resp.data)\r\n                setTimeout(() => {console.log(\"setTimeout\")}, 200)\r\n                if(resp.data === \"Offer deleted!\"){\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    function getStockDataForOffer(requestedSymbol) {\r\n        console.log(\"updating: \"+requestedSymbol)\r\n            axios\r\n                .get(`http://localhost:8080/user/getStockDataForOffer/${requestedSymbol}`)\r\n                .then((resp) => {\r\n                    console.log(resp.data)\r\n                    setQuantityAvailable(resp.data.stockQuantity);\r\n                    setCashAvailable(resp.data.availableCash);\r\n                });\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button className=\"item\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Delete\" onClick={handleShow} type=\"submit\">\r\n                <i className=\"la la-trash\" />\r\n            </button>\r\n             <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Delete Offer</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form action=\"#\" onSubmit={deleteOffer}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Select your stock</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={props.symbol} readOnly />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId=\"type\">\r\n                                    <Form.Label>Select action</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder={props.type} readOnly />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired quantity</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder={props.quantity} readOnly />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired price in $</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder={props.price} readOnly />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"mx-auto row row-eq-height\">\r\n\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type===\"BUY\"? <div><h8>Cash available:</h8> <br /><h5>{<NumberFormat value={CashAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Stock available:</h8> <br /> <h5>{<NumberFormat value={QuantityAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={\" pcs\"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div>\r\n                                </div>\r\n                            </Col>\r\n                        </div>\r\n                        <Row>\r\n                            <Col>\r\n                            {/*\r\n                                <Alert variant={Variant} show={AlertText? true : false}>\r\n                                    {AlertText}\r\n                                </Alert>\r\n                            */}\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button type=\"submit\" variant=\"primary\" className=\"mt-2\">\r\n                                DELETE\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    CANCEL\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal.js",["221","222"],"import React, {useState, useEffect} from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Form, Row, Col, Alert} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\n\r\nexport default function OfferModal(props) {\r\n    const [show, setShow] = useState(false);\r\n    const [SymbolList, setSymbolList] = useState([]);\r\n    const [Symbol, setSymbol] = useState(\"\");\r\n    const [Type, setType] = useState(\"\");\r\n\r\n    //SELL\r\n    const [QuantityAvailable, setQuantityAvailable] = useState(0);\r\n    //BUY\r\n    const [CashAvailable, setCashAvailable] = useState(0);\r\n\r\n    //BUY-SELL\r\n    const [Price, setPrice] = useState(0);\r\n    const [Quantity, setQuantity] = useState(0);\r\n    const [TransactionValue, setTransactionValue] = useState(0);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n \r\n\r\n    useEffect(() => {\r\n        if (props.symbol !== \"\"){\r\n            getSymbolListWithSymbolProvided()\r\n            setSymbol(props.symbol)\r\n            getStockDataForOffer(props.symbol)\r\n        } else {\r\n            getSymbolListWithoutSymbolProvided()\r\n        }\r\n        if (props.type !== \"\"){\r\n            setType(props.type)\r\n        };\r\n\r\n    }, []) \r\n\r\n    useEffect(() => {\r\n        setTransactionValue(Price * Quantity);\r\n    }, [Price, Quantity])\r\n\r\n\r\n    function placeOffer() {\r\n        console.log(`http://localhost:8080/user/placeoffer/${Symbol}/${Type}/${Quantity}/${Price}`)\r\n        axios\r\n            .post(`http://localhost:8080/user/placeoffer/${Symbol}/${Type}/${Quantity}/${Price}`)\r\n            .then((resp) => {\r\n                alert(resp.data)\r\n                setTimeout(() => {console.log(\"setTimeout\")}, 200)\r\n                if(resp.data === \"Offer Accepted!\"){\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    function getStockDataForOffer(requestedSymbol) {\r\n        console.log(\"updating: \"+requestedSymbol)\r\n            axios\r\n                .get(`http://localhost:8080/user/getStockDataForOffer/${requestedSymbol}`)\r\n                .then((resp) => {\r\n                    console.log(resp.data)\r\n                    setQuantityAvailable(resp.data.stockQuantity);\r\n                    setCashAvailable(resp.data.availableCash);\r\n                });\r\n    }\r\n\r\n    function getSymbolListWithSymbolProvided() {\r\n        axios\r\n            .get(`http://localhost:8080/stock/getStockSymbols`)\r\n            .then((resp) => {\r\n                setSymbolList(resp.data);\r\n            });\r\n    }\r\n\r\n    function getSymbolListWithoutSymbolProvided() {\r\n        axios\r\n            .get(`http://localhost:8080/stock/getStockSymbols`)\r\n            .then((resp) => {\r\n                setSymbolList(resp.data);\r\n                setSymbol(resp.data[0])\r\n                getStockDataForOffer(resp.data[0])\r\n            });\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button variant=\"success\" onClick={_=> {handleShow(); setPrice(0); setQuantity(0)}}>\r\n                Add new offer\r\n            </Button>\r\n             <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Place offer</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form action=\"#\" onSubmit={placeOffer}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Select your stock</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => {getStockDataForOffer(e.target.value); setSymbol(e.target.value)}} required defaultValue={Symbol}>\r\n                                            {SymbolList.map( (symbol) => {\r\n                                                return (\r\n                                                        <option value={symbol}>{symbol}</option>\r\n                                                    )\r\n                                                }\r\n                                                )\r\n                                            }\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId=\"type\">\r\n                                    <Form.Label>Select action</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => setType(e.target.value)} defaultValue=\"CHOOSE TYPE\" required>\r\n                                            <option hidden value={\"CHOOSE TYPE\"}>CHOOSE TYPE</option>\r\n                                            <option value={\"BUY\"}>Buy</option>\r\n                                            <option value={\"SELL\"}>Sell</option>\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired quantity</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder=\"Quantity\" onChange={e => setQuantity(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired price in $</Form.Label>\r\n                                        <Form.Control type=\"number\" placeholder=\"Price\" onChange={e => setPrice(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"mx-auto row row-eq-height\">\r\n\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Cash available:</h8> <br /><h5>{<NumberFormat value={CashAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Stock available:</h8> <br /> <h5>{<NumberFormat value={QuantityAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={\" pcs\"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={true} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={true} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                        </div>\r\n                        <Row>\r\n                            <Col>\r\n                            {/*\r\n                                <Alert variant={Variant} show={AlertText? true : false}>\r\n                                    {AlertText}\r\n                                </Alert>\r\n                            */}\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button type=\"submit\" variant=\"primary\" className=\"mt-2\">\r\n                                SUBMIT\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    CANCEL\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\DetailedStockPage\\OfferModal_EDIT.js",["223","224"],"import React, {useState, useEffect} from 'react'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Form, Row, Col, Alert} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\n\r\nexport default function OfferModal(props) {\r\n    const [show, setShow] = useState(false);\r\n    const [SymbolList, setSymbolList] = useState([]);\r\n    const [Symbol, setSymbol] = useState(\"\");\r\n    const [Type, setType] = useState(\"\");\r\n\r\n    //SELL\r\n    const [QuantityAvailable, setQuantityAvailable] = useState(0);\r\n    //BUY\r\n    const [CashAvailable, setCashAvailable] = useState(0);\r\n\r\n    //BUY-SELL\r\n    const [Price, setPrice] = useState(0);\r\n    const [Quantity, setQuantity] = useState(0);\r\n    const [TransactionValue, setTransactionValue] = useState(0);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n \r\n    useEffect(() => {\r\n        setTransactionValue(Price * Quantity);\r\n    }, [Price, Quantity])\r\n\r\n    useEffect(() => {\r\n        getSymbolList()\r\n        setSymbol(props.symbol)\r\n        getStockDataForOffer(props.symbol)\r\n        setType(props.type)\r\n        setQuantity(props.quantity)\r\n        setPrice(props.price)\r\n        setTransactionValue(props.price * props.quantity)\r\n    }, []) \r\n\r\n\r\n    function replaceOffer() {\r\n        axios\r\n            .post(`http://localhost:8080/user/replaceoffer/${props.id}/${Symbol}/${Type}/${Quantity}/${Price}`)\r\n            .then((resp) => {\r\n                alert(resp.data)\r\n                setTimeout(() => {console.log(\"setTimeout\")}, 200)\r\n                if(resp.data === \"Offer Replaced!\"){\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    function getStockDataForOffer(requestedSymbol) {\r\n        console.log(\"updating: \"+requestedSymbol)\r\n            axios\r\n                .get(`http://localhost:8080/user/getStockDataForOffer/${requestedSymbol}`)\r\n                .then((resp) => {\r\n                    console.log(resp.data)\r\n                    setQuantityAvailable(resp.data.stockQuantity);\r\n                    setCashAvailable(resp.data.availableCash);\r\n                });\r\n    }\r\n\r\n    function getSymbolList() {\r\n        axios\r\n            .get(`http://localhost:8080/stock/getStockSymbols`)\r\n            .then((resp) => {\r\n                setSymbolList(resp.data);\r\n            });\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button className=\"item\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Edit\" onClick={handleShow}>\r\n                <i className=\"las la-edit\" />\r\n            </button>\r\n             <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>EDIT Offer</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form action=\"#\" onSubmit={replaceOffer}>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Select your stock</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => {getStockDataForOffer(e.target.value); setSymbol(e.target.value)}} required defaultValue={Symbol}>\r\n                                            {SymbolList.map( (symbol) => {\r\n                                                return (\r\n                                                        <option value={symbol}>{symbol}</option>\r\n                                                    )\r\n                                                }\r\n                                                )\r\n                                            }\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId=\"type\">\r\n                                    <Form.Label>Select action</Form.Label>\r\n                                        <Form.Control as=\"select\" onChange={e => setType(e.target.value)} defaultValue={props.type} required>\r\n                                            <option hidden value={props.type}>{props.type}</option>\r\n                                            <option value={\"BUY\"}>Buy</option>\r\n                                            <option value={\"SELL\"}>Sell</option>\r\n                                        </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            \r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired quantity</Form.Label>\r\n                                        <Form.Control type=\"number\" value={Quantity} onChange={e => setQuantity(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controllId=\"price\">\r\n                                        <Form.Label>Desired price in $</Form.Label>\r\n                                        <Form.Control type=\"number\" value={Price} onChange={e => setPrice(e.target.value)} required/>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"mx-auto row row-eq-height\">\r\n\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Cash available:</h8> <br /><h5>{<NumberFormat value={CashAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Stock available:</h8> <br /> <h5>{<NumberFormat value={QuantityAvailable} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} suffix={\" pcs\"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                            <Col>\r\n                                <div className=\"d-flex border border-primary text-center align-items-center justify-content-center\">\r\n                                    {Type === \"\" ? <div>ENTER DATA...</div> : <p></p>}\r\n                                    {Type===\"BUY\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                    {Type===\"SELL\"? <div><h8>Transaction value:</h8> <br /> <h5>{<NumberFormat value={TransactionValue} displayType={'text'} thousandSeparator={\" \"} decimalScale={2} prefix={\"$ \"}/>}</h5></div> : <p></p>}\r\n                                </div>\r\n                            </Col>\r\n                        </div>\r\n                        <Row>\r\n                            <Col>\r\n                            {/*\r\n                                <Alert variant={Variant} show={AlertText? true : false}>\r\n                                    {AlertText}\r\n                                </Alert>\r\n                            */}\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button type=\"submit\" variant=\"primary\" className=\"mt-2\">\r\n                                REPLACE\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    CANCEL\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\NewsPage\\SpecificNews.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\NewsPage\\AllNews.js",[],"C:\\Users\\Tamás\\source\\repos\\stock-trader3.0\\stocktrader\\src\\components\\NewsPage\\NewsCard.js",["225","226"],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":33,"column":11,"nodeType":"233","endLine":33,"endColumn":36},{"ruleId":"231","severity":1,"message":"232","line":62,"column":17,"nodeType":"233","endLine":62,"endColumn":42},{"ruleId":"234","severity":1,"message":"235","line":2,"column":8,"nodeType":"236","messageId":"237","endLine":2,"endColumn":19},{"ruleId":"234","severity":1,"message":"238","line":5,"column":8,"nodeType":"236","messageId":"237","endLine":5,"endColumn":17},{"ruleId":"234","severity":1,"message":"239","line":4,"column":8,"nodeType":"236","messageId":"237","endLine":4,"endColumn":13},{"ruleId":"234","severity":1,"message":"239","line":3,"column":8,"nodeType":"236","messageId":"237","endLine":3,"endColumn":13},{"ruleId":"234","severity":1,"message":"240","line":2,"column":9,"nodeType":"236","messageId":"237","endLine":2,"endColumn":12},{"ruleId":"234","severity":1,"message":"241","line":2,"column":14,"nodeType":"236","messageId":"237","endLine":2,"endColumn":17},{"ruleId":"234","severity":1,"message":"242","line":2,"column":25,"nodeType":"236","messageId":"237","endLine":2,"endColumn":30},{"ruleId":"234","severity":1,"message":"243","line":11,"column":21,"nodeType":"236","messageId":"237","endLine":11,"endColumn":31},{"ruleId":"234","severity":1,"message":"244","line":2,"column":15,"nodeType":"236","messageId":"237","endLine":2,"endColumn":19},{"ruleId":"234","severity":1,"message":"245","line":2,"column":21,"nodeType":"236","messageId":"237","endLine":2,"endColumn":27},{"ruleId":"234","severity":1,"message":"239","line":4,"column":8,"nodeType":"236","messageId":"237","endLine":4,"endColumn":13},{"ruleId":"246","severity":1,"message":"247","line":26,"column":8,"nodeType":"248","endLine":26,"endColumn":22,"suggestions":"249"},{"ruleId":"250","severity":1,"message":"251","line":30,"column":46,"nodeType":"252","messageId":"253","endLine":30,"endColumn":48},{"ruleId":"234","severity":1,"message":"254","line":5,"column":9,"nodeType":"236","messageId":"237","endLine":5,"endColumn":14},{"ruleId":"234","severity":1,"message":"255","line":5,"column":16,"nodeType":"236","messageId":"237","endLine":5,"endColumn":22},{"ruleId":"234","severity":1,"message":"256","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":17},{"ruleId":"234","severity":1,"message":"257","line":7,"column":8,"nodeType":"236","messageId":"237","endLine":7,"endColumn":16},{"ruleId":"234","severity":1,"message":"258","line":19,"column":12,"nodeType":"236","messageId":"237","endLine":19,"endColumn":30},{"ruleId":"234","severity":1,"message":"259","line":19,"column":32,"nodeType":"236","messageId":"237","endLine":19,"endColumn":53},{"ruleId":"234","severity":1,"message":"260","line":20,"column":12,"nodeType":"236","messageId":"237","endLine":20,"endColumn":30},{"ruleId":"234","severity":1,"message":"261","line":20,"column":32,"nodeType":"236","messageId":"237","endLine":20,"endColumn":53},{"ruleId":"234","severity":1,"message":"262","line":21,"column":12,"nodeType":"236","messageId":"237","endLine":21,"endColumn":16},{"ruleId":"234","severity":1,"message":"263","line":21,"column":18,"nodeType":"236","messageId":"237","endLine":21,"endColumn":25},{"ruleId":"234","severity":1,"message":"264","line":22,"column":12,"nodeType":"236","messageId":"237","endLine":22,"endColumn":18},{"ruleId":"234","severity":1,"message":"265","line":22,"column":20,"nodeType":"236","messageId":"237","endLine":22,"endColumn":29},{"ruleId":"234","severity":1,"message":"266","line":23,"column":12,"nodeType":"236","messageId":"237","endLine":23,"endColumn":21},{"ruleId":"234","severity":1,"message":"267","line":25,"column":12,"nodeType":"236","messageId":"237","endLine":25,"endColumn":31},{"ruleId":"234","severity":1,"message":"268","line":25,"column":33,"nodeType":"236","messageId":"237","endLine":25,"endColumn":55},{"ruleId":"234","severity":1,"message":"269","line":28,"column":11,"nodeType":"236","messageId":"237","endLine":28,"endColumn":28},{"ruleId":"250","severity":1,"message":"251","line":29,"column":49,"nodeType":"252","messageId":"253","endLine":29,"endColumn":51},{"ruleId":"234","severity":1,"message":"243","line":36,"column":21,"nodeType":"236","messageId":"237","endLine":36,"endColumn":31},{"ruleId":"234","severity":1,"message":"270","line":92,"column":14,"nodeType":"236","messageId":"237","endLine":92,"endColumn":25},{"ruleId":"234","severity":1,"message":"271","line":97,"column":14,"nodeType":"236","messageId":"237","endLine":97,"endColumn":29},{"ruleId":"234","severity":1,"message":"272","line":105,"column":14,"nodeType":"236","messageId":"237","endLine":105,"endColumn":22},{"ruleId":"234","severity":1,"message":"273","line":139,"column":14,"nodeType":"236","messageId":"237","endLine":139,"endColumn":23},{"ruleId":"246","severity":1,"message":"274","line":198,"column":8,"nodeType":"248","endLine":198,"endColumn":10,"suggestions":"275"},{"ruleId":"234","severity":1,"message":"276","line":1,"column":15,"nodeType":"236","messageId":"237","endLine":1,"endColumn":23},{"ruleId":"234","severity":1,"message":"277","line":4,"column":10,"nodeType":"236","messageId":"237","endLine":4,"endColumn":14},{"ruleId":"234","severity":1,"message":"278","line":3,"column":8,"nodeType":"236","messageId":"237","endLine":3,"endColumn":13},{"ruleId":"234","severity":1,"message":"254","line":5,"column":9,"nodeType":"236","messageId":"237","endLine":5,"endColumn":14},{"ruleId":"234","severity":1,"message":"255","line":5,"column":16,"nodeType":"236","messageId":"237","endLine":5,"endColumn":22},{"ruleId":"234","severity":1,"message":"256","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":17},{"ruleId":"234","severity":1,"message":"279","line":12,"column":10,"nodeType":"236","messageId":"237","endLine":12,"endColumn":19},{"ruleId":"234","severity":1,"message":"280","line":13,"column":10,"nodeType":"236","messageId":"237","endLine":13,"endColumn":14},{"ruleId":"234","severity":1,"message":"281","line":13,"column":16,"nodeType":"236","messageId":"237","endLine":13,"endColumn":23},{"ruleId":"234","severity":1,"message":"258","line":14,"column":10,"nodeType":"236","messageId":"237","endLine":14,"endColumn":28},{"ruleId":"234","severity":1,"message":"259","line":14,"column":30,"nodeType":"236","messageId":"237","endLine":14,"endColumn":51},{"ruleId":"246","severity":1,"message":"282","line":24,"column":6,"nodeType":"248","endLine":24,"endColumn":8,"suggestions":"283"},{"ruleId":"246","severity":1,"message":"284","line":16,"column":8,"nodeType":"248","endLine":16,"endColumn":10,"suggestions":"285"},{"ruleId":"246","severity":1,"message":"286","line":31,"column":8,"nodeType":"248","endLine":31,"endColumn":29,"suggestions":"287"},{"ruleId":"234","severity":1,"message":"288","line":3,"column":8,"nodeType":"236","messageId":"237","endLine":3,"endColumn":19},{"ruleId":"234","severity":1,"message":"239","line":4,"column":8,"nodeType":"236","messageId":"237","endLine":4,"endColumn":13},{"ruleId":"246","severity":1,"message":"289","line":21,"column":8,"nodeType":"248","endLine":21,"endColumn":10,"suggestions":"290"},{"ruleId":"234","severity":1,"message":"240","line":2,"column":9,"nodeType":"236","messageId":"237","endLine":2,"endColumn":12},{"ruleId":"234","severity":1,"message":"241","line":2,"column":14,"nodeType":"236","messageId":"237","endLine":2,"endColumn":17},{"ruleId":"234","severity":1,"message":"242","line":2,"column":25,"nodeType":"236","messageId":"237","endLine":2,"endColumn":30},{"ruleId":"234","severity":1,"message":"243","line":16,"column":21,"nodeType":"236","messageId":"237","endLine":16,"endColumn":31},{"ruleId":"234","severity":1,"message":"291","line":4,"column":25,"nodeType":"236","messageId":"237","endLine":4,"endColumn":30},{"ruleId":"246","severity":1,"message":"292","line":40,"column":8,"nodeType":"248","endLine":40,"endColumn":10,"suggestions":"293"},{"ruleId":"234","severity":1,"message":"291","line":4,"column":25,"nodeType":"236","messageId":"237","endLine":4,"endColumn":30},{"ruleId":"246","severity":1,"message":"292","line":40,"column":8,"nodeType":"248","endLine":40,"endColumn":10,"suggestions":"294"},{"ruleId":"234","severity":1,"message":"291","line":4,"column":25,"nodeType":"236","messageId":"237","endLine":4,"endColumn":30},{"ruleId":"234","severity":1,"message":"295","line":11,"column":12,"nodeType":"236","messageId":"237","endLine":11,"endColumn":18},{"ruleId":"234","severity":1,"message":"296","line":20,"column":12,"nodeType":"236","messageId":"237","endLine":20,"endColumn":17},{"ruleId":"234","severity":1,"message":"297","line":21,"column":12,"nodeType":"236","messageId":"237","endLine":21,"endColumn":20},{"ruleId":"246","severity":1,"message":"298","line":38,"column":8,"nodeType":"248","endLine":38,"endColumn":10,"suggestions":"299"},{"ruleId":"234","severity":1,"message":"291","line":4,"column":25,"nodeType":"236","messageId":"237","endLine":4,"endColumn":30},{"ruleId":"246","severity":1,"message":"300","line":41,"column":8,"nodeType":"248","endLine":41,"endColumn":10,"suggestions":"301"},{"ruleId":"234","severity":1,"message":"291","line":4,"column":25,"nodeType":"236","messageId":"237","endLine":4,"endColumn":30},{"ruleId":"246","severity":1,"message":"298","line":40,"column":8,"nodeType":"248","endLine":40,"endColumn":10,"suggestions":"302"},{"ruleId":"303","severity":1,"message":"304","line":20,"column":7,"nodeType":"233","endLine":20,"endColumn":59},{"ruleId":"305","severity":1,"message":"306","line":20,"column":7,"nodeType":"233","endLine":20,"endColumn":59},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'StocksTable' is defined but never used.","Identifier","unusedVar","'Stockcard' is defined but never used.","'axios' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Table' is defined but never used.","'setColumns' is assigned a value but never used.","'Body' is defined but never used.","'Header' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GetStockAmount'. Either include it or remove the dependency array.","ArrayExpression",["309"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Modal' is defined but never used.","'Button' is defined but never used.","'OfferForm' is defined but never used.","'EditForm' is defined but never used.","'isFormModalVisible' is assigned a value but never used.","'setisFormModalVisible' is assigned a value but never used.","'isEditModalVisible' is assigned a value but never used.","'setisEditModalVisible' is assigned a value but never used.","'Cash' is assigned a value but never used.","'setCash' is assigned a value but never used.","'Edited' is assigned a value but never used.","'setEdited' is assigned a value but never used.","'Available' is assigned a value but never used.","'isOfferModalVisible' is assigned a value but never used.","'setIsOfferModalVisible' is assigned a value but never used.","'getNumberOfStocks' is assigned a value but never used.","'DeleteOffer' is defined but never used.","'DecideOfferType' is defined but never used.","'isSpacer' is defined but never used.","'EditModal' is defined but never used.","React Hook useEffect has a missing dependency: 'props.symbol'. Either include it or remove the dependency array.",["310"],"'useState' is defined but never used.","'Link' is defined but never used.","'DayJS' is defined but never used.","'StockList' is assigned a value but never used.","'Type' is assigned a value but never used.","'setType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.symbol'. Either include it or remove the dependency array. If 'setStockList' needs the current value of 'props.symbol', you can also switch to useReducer instead of useState and read 'props.symbol' in the reducer.",["311"],"React Hook useEffect has a missing dependency: 'getStockPerformance'. Either include it or remove the dependency array.",["312"],"React Hook useEffect has missing dependencies: 'getStockDataForOffer', 'props.stock', 'props.stockList', and 'props.type'. Either include them or remove the dependency array. If 'setStock' needs the current value of 'props.stock', you can also switch to useReducer instead of useState and read 'props.stock' in the reducer.",["313"],"'useInterval' is defined but never used.","React Hook useEffect has missing dependencies: 'props.dates' and 'props.series'. Either include them or remove the dependency array. If 'setSeries' needs the current value of 'props.series', you can also switch to useReducer instead of useState and read 'props.series' in the reducer.",["314"],"'Alert' is defined but never used.","React Hook useEffect has missing dependencies: 'SymbolList', 'props.symbol', and 'props.type'. Either include them or remove the dependency array. If 'setSymbol' needs the current value of 'props.symbol', you can also switch to useReducer instead of useState and read 'props.symbol' in the reducer.",["315"],["316"],"'Symbol' is assigned a value but never used.","'Price' is assigned a value but never used.","'Quantity' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.price', 'props.quantity', 'props.symbol', and 'props.type'. Either include them or remove the dependency array. If 'setSymbol' needs the current value of 'props.symbol', you can also switch to useReducer instead of useState and read 'props.symbol' in the reducer.",["317"],"React Hook useEffect has missing dependencies: 'getSymbolListWithoutSymbolProvided', 'props.symbol', and 'props.type'. Either include them or remove the dependency array. If 'setSymbol' needs the current value of 'props.symbol', you can also switch to useReducer instead of useState and read 'props.symbol' in the reducer.",["318"],["319"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","no-global-assign","no-unsafe-negation",{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"322","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"331","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"334","fix":"338"},"Update the dependencies array to be: [GetStockAmount, props.symbol]",{"range":"339","text":"340"},"Update the dependencies array to be: [props.symbol]",{"range":"341","text":"342"},{"range":"343","text":"342"},"Update the dependencies array to be: [getStockPerformance]",{"range":"344","text":"345"},"Update the dependencies array to be: [Stock, getStockDataForOffer, props.stock, props.stockList, props.symbol, props.type]",{"range":"346","text":"347"},"Update the dependencies array to be: [props.dates, props.series]",{"range":"348","text":"349"},"Update the dependencies array to be: [SymbolList, props.symbol, props.type]",{"range":"350","text":"351"},{"range":"352","text":"351"},"Update the dependencies array to be: [props.price, props.quantity, props.symbol, props.type]",{"range":"353","text":"354"},"Update the dependencies array to be: [getSymbolListWithoutSymbolProvided, props.symbol, props.type]",{"range":"355","text":"356"},{"range":"357","text":"354"},[919,933],"[GetStockAmount, props.symbol]",[6638,6640],"[props.symbol]",[858,860],[488,490],"[getStockPerformance]",[1108,1129],"[Stock, getStockDataForOffer, props.stock, props.stockList, props.symbol, props.type]",[511,513],"[props.dates, props.series]",[1265,1267],"[SymbolList, props.symbol, props.type]",[1264,1266],[1184,1186],"[props.price, props.quantity, props.symbol, props.type]",[1297,1299],"[getSymbolListWithoutSymbolProvided, props.symbol, props.type]",[1327,1329]]